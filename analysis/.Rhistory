select(-x1) |>
mutate(participant = str_replace_all(participant, ".bdf", "")) |>
mutate(participant = str_replace_all(participant, "s", "")) |>
mutate(participant = as.numeric(participant))
# Write formatted to CSV
write.csv(physio_clean,
"../data/deap/features/physio-formatted.csv",
row.names = F)
# Clean format physio dataframe
physio_clean <- physio_raw |>
clean_names() |>
select(-x1) |>
mutate(participant = str_replace_all(participant, ".bdf", "")) |>
mutate(participant = str_replace_all(participant, "s", "")) |>
mutate(participant = as.numeric(participant))
library(readr)
library(readr)
library(janitor)
library(tidyverse)
# Set working directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Read in raw CSV
physio_raw <- read_csv("../data/deap/features/physio-feature-data.csv")
# Clean format physio dataframe
physio_clean <- physio_raw |>
clean_names() |>
select(-x1) |>
mutate(participant = str_replace_all(participant, ".bdf", "")) |>
mutate(participant = str_replace_all(participant, "s", "")) |>
mutate(participant = as.numeric(participant))
# Write formatted to CSV
write.csv(physio_clean,
"../data/deap/features/physio-formatted.csv",
row.names = F)
library(readr)
library(janitor)
library(tidyverse)
# Set working directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Read in raw CSV
mir_raw <- read_csv("../data/deap/features/audio-feature-data.csv")
# Clean format physio dataframe
mir_clean <- mir_raw |>
clean_names() |>
select(-x1) |>
rename(stim_id = file_name) |>
mutate(stim_id = str_replace(stim_id, "prep-audio-", "stim_")) |>
mutate(stim_id = str_replace(stim_id, ".wav", ""))
# Write formatted to CSV
write.csv(mir_clean,
"../data/deap/features/mir-formatted.csv",
row.names = F)
library(readr)
library(janitor)
library(tidyverse)
# Set working directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Read in raw CSV
physio_raw <- read_csv("../data/deap/features/physio-feature-data.csv")
# Clean format physio dataframe
physio_clean <- physio_raw |>
clean_names() |>
select(-x1) |>
mutate(participant = str_replace_all(participant, ".bdf", "")) |>
mutate(participant = str_replace_all(participant, "s", "")) |>
mutate(participant = as.numeric(participant))
# Write formatted to CSV
write.csv(physio_clean,
"../data/deap/features/physio-formatted.csv",
row.names = F)
library(tidyverse)
library(flexplot)
library(party)
library(lme4)
# Normalize function
normalize <- function(input) {
avg = mean(input)
std = sd(input)
return((input - avg) / std)
}
# Set wd to active script location
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Read in  CSV files
physio_formatted <- read_csv("../data/deap/features/physio-formatted.csv")
mir_formatted <- read_csv("../data/deap/features/mir-formatted.csv")
ratings_formatted <- read_csv("../data/deap/Metadata/metadata_csv/clean-ratings.csv")
# Select physio column of interest
outcome_variable <- "gsr_mean"
flexplot(gsr_mean ~ 1, data=physio_formatted)
# normalize variables
physio_formatted$rmssd = log(physio_formatted$rmssd)
physio_formatted$sdnn = log(physio_formatted$sdnn)
physio_formatted$gsr_mean = log(physio_formatted$gsr_mean)
physio_formatted$gsr_std = log(physio_formatted$gsr_std)
flexplot(gsr_mean ~ 1, data=physio_formatted)
# Create 3 column data frame with column of interest
reduced_physio <- physio_formatted |>
select(c("participant", "stim_id", outcome_variable)) |>
rename(outcome = outcome_variable) |>
filter(participant != "18")
# Create Model data
model_data <- reduced_physio |>
left_join(mir_formatted, by = "stim_id") |>
left_join(ratings_formatted, by = join_by(participant == participant,
stim_id == stim_id)) |>
drop_na() |>
select(participant, outcome, zero_cross_std, mfcc6_std)
# Normalize participant ratings of stimuli
normalized_data <- model_data |>
group_by(participant) |>
mutate(valence = normalize(valence),
arousal = normalize(arousal),
dominance = normalize(dominance),
liking = normalize(liking),
familiarity = normalize(familiarity))
library(tidyverse)
library(flexplot)
library(party)
library(lme4)
# Normalize function
normalize <- function(input) {
avg = mean(input)
std = sd(input)
return((input - avg) / std)
}
# Set wd to active script location
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Read in  CSV files
physio_formatted <- read_csv("../data/deap/features/physio-formatted.csv")
mir_formatted <- read_csv("../data/deap/features/mir-formatted.csv")
# Select physio column of interest
outcome_variable <- "gsr_mean"
flexplot(gsr_mean ~ 1, data=physio_formatted)
# normalize variables
# physio_formatted$rmssd = log(physio_formatted$rmssd)
# physio_formatted$sdnn = log(physio_formatted$sdnn)
physio_formatted$gsr_mean = log(physio_formatted$gsr_mean)
flexplot(gsr_mean ~ 1, data=physio_formatted)
# Create 3 column data frame with column of interest
reduced_physio <- physio_formatted |>
select(c("participant", "stim_id", outcome_variable)) |>
rename(outcome = outcome_variable) |>
filter(participant != "18")
# Create Model data
model_data <- reduced_physio |>
left_join(mir_formatted, by = "stim_id")
# For GSR Mean
full <- lmer(outcome ~ zero_cross_std + (zero_cross_std|participant), data = model_data)
reduced <- lmer(outcome ~ zero_cross_std + (1|participant), data = model_data)
compare.fits(outcome ~ zero_cross_std, data=model_data, full, reduced)
# For GSR Mean
full <- lmer(outcome ~ zero_cross_std + (1|participant), data = model_data)
reduced <- lmer(outcome ~ 1 + (1|participant), data = model_data)
compare.fits(outcome ~ zero_cross_std, data=model_data, full, reduced)
model.comparison(full, reduced)
visualize(full)
# For GSR Mean
# Model 1: Zero Crossing rate as a fixed effect vs data mean
full <- lmer(outcome ~ zero_cross_std + (1|participant), data = model_data)
reduced <- lmer(outcome ~ 1 + (1|participant), data = model_data)
compare.fits(outcome ~ zero_cross_std, data=model_data, full, reduced)
model.comparison(full, reduced)
visualize(full)
# Model 2: Zero Crossing rate as fixed and random effect vs only as fixed effect (fixed slopes vs variable slopes)
full <- lmer(outcome ~ zero_cross_std + (zero_cross_std|participant), data = model_data)
reduced <- lmer(outcome ~ zero_cross_std + (1|participant), data = model_data)
compare.fits(outcome ~ zero_cross_std, data=model_data, full, reduced)
model.comparison(full, reduced)
visualize(full)
# Model 3: Std Dev of Zero Crossing rate as a fixed effect vs data mean
full <- lmer(outcome ~ mfcc6_std + (1|participant), data = model_data)
reduced <- lmer(outcome ~ 1 + (1|participant), data = model_data)
compare.fits(outcome ~ zero_cross_std, data=model_data, full, reduced)
model.comparison(full, reduced)
# Model 3: Std Dev of Zero Crossing rate as a fixed effect vs data mean
full <- lmer(outcome ~ mfcc6_std + (1|participant), data = model_data)
reduced <- lmer(outcome ~ 1 + (1|participant), data = model_data)
compare.fits(outcome ~ mfcc6_std, data=model_data, full, reduced)
model.comparison(full, reduced)
visualize(full)
# Model 4: Std Dev of MFCC 6 as a fixed effect and random effect vs only as fixed effect (ie fixed slopes vs variable slopes)
full <- lmer(outcome ~ zero_cross_std + (zero_cross_std|participant), data = model_data)
reduced <- lmer(outcome ~ zero_cross_std + (1|participant), data = model_data)
# Model 4: Std Dev of MFCC 6 as a fixed effect and random effect vs only as fixed effect (ie fixed slopes vs variable slopes)
full <- lmer(outcome ~ mfcc6_std + (mfcc6_std|participant), data = model_data)
reduced <- lmer(outcome ~ mfcc6_std + (1|participant), data = model_data)
compare.fits(outcome ~ mfcc6_std, data=model_data, full, reduced)
model.comparison(full, reduced)
visualize(full)
flexplot(mean_ibi ~ 1, data=physio_formatted)
flexplot(outcome ~ 1, data=physio_formatted)
# Create 3 column data frame with column of interest
reduced_physio <- physio_formatted |>
select(c("participant", "stim_id", outcome_variable)) |>
rename(outcome = outcome_variable) |>
filter(participant != "18")
flexplot(outcome ~ 1, data=reduced_physio)
# Read in  CSV files (Change these paths to whatever they need to be)
physio_formatted <- read_csv("../data/deap/features/physio-formatted.csv")
mir_formatted <- read_csv("../data/deap/features/mir-formatted.csv")
# Select physio column of interest (Look at the physio_formatted data.frame for
# Available column names)
outcome_variable <- "gsr_mean"
# normalize gsr_mean (only necessary if outcome is 'gsr_mean', but doesn't hurt
# regardless)
physio_formatted$gsr_mean = log(physio_formatted$gsr_mean)
# Create 3 column data frame with column of interest
reduced_physio <- physio_formatted |>
select(c("participant", "stim_id", outcome_variable)) |>
rename(outcome = outcome_variable) |>
filter(participant != "18")
flexplot(outcome ~ 1, data=reduced_physio)
# normalize gsr_mean (only necessary if outcome is 'gsr_mean', but doesn't hurt
# regardless)
physio_formatted$gsr_mean = log(physio_formatted$gsr_mean)
# Create 3 column data frame with column of interest
reduced_physio <- physio_formatted |>
select(c("participant", "stim_id", outcome_variable)) |>
rename(outcome = outcome_variable) |>
filter(participant != "18")
flexplot(outcome ~ 1, data=reduced_physio)
# Read in  CSV files (Change these paths to whatever they need to be)
physio_formatted <- read_csv("../data/deap/features/physio-formatted.csv")
mir_formatted <- read_csv("../data/deap/features/mir-formatted.csv")
# Select physio column of interest (Look at the physio_formatted data.frame for
# Available column names)
outcome_variable <- "gsr_mean"
# Create 3 column data frame with column of interest
reduced_physio <- physio_formatted |>
select(c("participant", "stim_id", outcome_variable)) |>
rename(outcome = outcome_variable) |>
filter(participant != "18")
flexplot(outcome ~ 1, data=reduced_physio)
# Read in  CSV files (Change these paths to whatever they need to be)
physio_formatted <- read_csv("../data/deap/features/physio-formatted.csv")
mir_formatted <- read_csv("../data/deap/features/mir-formatted.csv")
# Select physio column of interest (Look at the physio_formatted data.frame for
# Available column names)
outcome_variable <- "gsr_mean"
# normalize gsr_mean (only necessary if outcome is 'gsr_mean', but doesn't hurt
# regardless)
physio_formatted$gsr_mean = log(physio_formatted$gsr_mean)
# Create 3 column data frame with column of interest
reduced_physio <- physio_formatted |>
select(c("participant", "stim_id", outcome_variable)) |>
rename(outcome = outcome_variable) |>
filter(participant != "18")
flexplot(outcome ~ 1, data=reduced_physio)
# Create Model data
model_data <- reduced_physio |>
left_join(mir_formatted, by = "stim_id")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(flexplot)
library(party)
library(lme4)
knitr::opts_chunk$set(echo = TRUE)
flexplot(outcome ~ 1, data=model_data)
# Read in  CSV files (Change these paths to whatever they need to be)
physio_formatted <- read_csv("../data/deap/features/physio-formatted.csv")
mir_formatted <- read_csv("../data/deap/features/mir-formatted.csv")
# Select physio column of interest (Look at the physio_formatted data.frame for
# Available column names)
outcome_variable <- "gsr_mean"
# Create 3 column data frame with column of interest
reduced_physio <- physio_formatted |>
select(c("participant", "stim_id", outcome_variable)) |>
rename(outcome = outcome_variable) |>
filter(participant != "18")
flexplot(outcome ~ 1, data=reduced_physio)
# Create Model data
model_data <- reduced_physio |>
left_join(mir_formatted, by = "stim_id")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(flexplot)
library(party)
library(lme4)
library(tidyverse)
library(flexplot)
library(party)
library(lme4)
library(tidyverse)
library(flexplot)
library(party)
library(lme4)
library(tidyverse)
library(flexplot)
library(party)
library(lme4)
# Read in  CSV files (Change these paths to whatever they need to be)
physio_formatted <- read_csv("../data/deap/features/physio-formatted.csv")
mir_formatted <- read_csv("../data/deap/features/mir-formatted.csv")
# Select physio column of interest (Look at the physio_formatted data.frame for
# Available column names)
outcome_variable <- "gsr_mean"
# Create 3 column data frame with column of interest
reduced_physio <- physio_formatted |>
select(c("participant", "stim_id", outcome_variable)) |>
rename(outcome = outcome_variable) |>
filter(participant != "18")
flexplot(outcome ~ 1, data=reduced_physio)
# Create Model data
model_data <- reduced_physio |>
left_join(mir_formatted, by = "stim_id")
flexplot(outcome ~ 1, data=model_data)
library(tidyverse)
library(flexplot)
library(party)
library(lme4)
# Normalize function
normalize <- function(input) {
avg = mean(input)
std = sd(input)
return((input - avg) / std)
}
# Set wd to active script location
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Read in  CSV files (Change these paths to whatever they need to be)
physio_formatted <- read_csv("../data/deap/features/physio-formatted.csv")
mir_formatted <- read_csv("../data/deap/features/mir-formatted.csv")
# Select physio column of interest (Look at the physio_formatted data.frame for
# Available column names)
outcome_variable <- "gsr_mean"
# normalize gsr_mean (only necessary if outcome is 'gsr_mean', but doesn't hurt
# regardless)
physio_formatted$gsr_mean = log(physio_formatted$gsr_mean)
# Create 3 column data frame with column of interest
reduced_physio <- physio_formatted |>
select(c("participant", "stim_id", outcome_variable)) |>
rename(outcome = outcome_variable) |>
filter(participant != "18")
flexplot(outcome ~ 1, data=reduced_physio)
# Create Model data
model_data <- reduced_physio |>
left_join(mir_formatted, by = "stim_id")
# Model 1: Std dev of Zero Crossing rate as a fixed effect vs data mean
full <- lmer(outcome ~ zero_cross_std + (1|participant), data = model_data)
reduced <- lmer(outcome ~ 1 + (1|participant), data = model_data)
compare.fits(outcome ~ zero_cross_std, data=model_data, full, reduced)
compare.fits(outcome ~ zero_cross_std, data=model_data, full, reduced)
# Normalize function
normalize <- function(input) {
avg = mean(input)
std = sd(input)
return((input - avg) / std)
}
# Set wd to active script location
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Read in  CSV files (Change these paths to whatever they need to be)
physio_formatted <- read_csv("../data/deap/features/physio-formatted.csv")
mir_formatted <- read_csv("../data/deap/features/mir-formatted.csv")
# Select physio column of interest. (gsr_mean and mean_ibi seem to show the largest effects)
outcome_variable <- "gsr_mean"
# normalize gsr_mean (only necessary if outcome is 'gsr_mean', but doesn't hurt
# regardless)
physio_formatted$gsr_mean = log(physio_formatted$gsr_mean)
# Create 3 column data frame with column of interest
reduced_physio <- physio_formatted |>
select(c("participant", "stim_id", outcome_variable)) |>
rename(outcome = outcome_variable) |>
filter(participant != "18")
flexplot(outcome ~ 1, data=reduced_physio)
# Create Model data
model_data <- reduced_physio |>
left_join(mir_formatted, by = "stim_id")
# Model 1: Std dev of Zero Crossing rate as a fixed effect vs data mean
full <- lmer(outcome ~ zero_cross_std + (1|participant), data = model_data)
reduced <- lmer(outcome ~ 1 + (1|participant), data = model_data)
compare.fits(outcome ~ zero_cross_std, data=model_data, full, reduced)
model.comparison(full, reduced)
visualize(full)
# Model 2: Std dev of Zero Crossing rate as fixed and random effect vs only as fixed effect (ie fixed slopes vs variable slopes)
full <- lmer(outcome ~ zero_cross_std + (zero_cross_std|participant), data = model_data)
reduced <- lmer(outcome ~ zero_cross_std + (1|participant), data = model_data)
compare.fits(outcome ~ zero_cross_std, data=model_data, full, reduced)
model.comparison(full, reduced)
visualize(full)
# Model 3: Std Dev of MFCC 6 as a fixed effect vs data mean
full <- lmer(outcome ~ mfcc6_std + (1|participant), data = model_data)
reduced <- lmer(outcome ~ 1 + (1|participant), data = model_data)
compare.fits(outcome ~ mfcc6_std, data=model_data, full, reduced)
model.comparison(full, reduced)
visualize(full)
# Model 4: Std Dev of MFCC 6 as a fixed effect and random effect vs only as fixed effect (ie fixed slopes vs variable slopes)
full <- lmer(outcome ~ mfcc6_std + (mfcc6_std|participant), data = model_data)
reduced <- lmer(outcome ~ mfcc6_std + (1|participant), data = model_data)
compare.fits(outcome ~ mfcc6_std, data=model_data, full, reduced)
model.comparison(full, reduced)
visualize(full)
model.comparison(full, reduced)
# Read in  CSV files
physio_formatted <- read_csv("physio-formatted.csv")
# Set wd to active script location
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Read in  CSV files (Change these paths to whatever they need to be)
physio_formatted <- read_csv("physio-formatted.csv")
mir_formatted <- read_csv("mir-formatted.csv")
# Select physio column of interest. (gsr_mean and mean_ibi seem to show the largest effects)
outcome_variable <- "gsr_mean"
# normalize gsr_mean (only necessary if outcome is 'gsr_mean', but doesn't hurt
# regardless)
physio_formatted$gsr_mean = log(physio_formatted$gsr_mean)
# Create 3 column data frame with column of interest
reduced_physio <- physio_formatted |>
select(c("participant", "stim_id", outcome_variable)) |>
rename(outcome = outcome_variable) |>
filter(participant != "18")
flexplot(outcome ~ 1, data=reduced_physio)
# Create Model data
model_data <- reduced_physio |>
left_join(mir_formatted, by = "stim_id")
# Model 1: Std dev of Zero Crossing rate as a fixed effect vs data mean
full <- lmer(outcome ~ zero_cross_std + (1|participant), data = model_data)
reduced <- lmer(outcome ~ 1 + (1|participant), data = model_data)
compare.fits(outcome ~ zero_cross_std, data=model_data, full, reduced)
model.comparison(full, reduced)
# Model 1: Std dev of Zero Crossing rate as a fixed effect vs data mean
full <- lmer(outcome ~ zero_cross_std + (1|participant), data = model_data)
reduced <- lmer(outcome ~ 1 + (1|participant), data = model_data)
compare.fits(outcome ~ zero_cross_std, data=model_data, full, reduced)
model.comparison(full, reduced)
View(model_data)
# Create 3 column data frame with column of interest
reduced_physio <- physio_formatted |>
select(c("participant", "stim_id", outcome_variable)) |>
rename(outcome = outcome_variable) |>
filter(participant != "18"
stim_id != "baseline")
# Create 3 column data frame with column of interest
reduced_physio <- physio_formatted |>
select(c("participant", "stim_id", outcome_variable)) |>
rename(outcome = outcome_variable) |>
filter(participant != "18",
stim_id != "baseline")
flexplot(outcome ~ 1, data=reduced_physio)
# Create Model data
model_data <- reduced_physio |>
left_join(mir_formatted, by = "stim_id")
# Model 1: Std dev of Zero Crossing rate as a fixed effect vs data mean
full <- lmer(outcome ~ zero_cross_std + (1|participant), data = model_data)
reduced <- lmer(outcome ~ 1 + (1|participant), data = model_data)
compare.fits(outcome ~ zero_cross_std, data=model_data, full, reduced)
model.comparison(full, reduced)
visualize(full)
# Model 2: Std dev of Zero Crossing rate as fixed and random effect vs only as fixed effect (ie fixed slopes vs variable slopes)
full <- lmer(outcome ~ zero_cross_std + (zero_cross_std|participant), data = model_data)
reduced <- lmer(outcome ~ zero_cross_std + (1|participant), data = model_data)
compare.fits(outcome ~ zero_cross_std, data=model_data, full, reduced)
model.comparison(full, reduced)
visualize(full)
# Model 3: Std Dev of MFCC 6 as a fixed effect vs data mean
full <- lmer(outcome ~ mfcc6_std + (1|participant), data = model_data)
reduced <- lmer(outcome ~ 1 + (1|participant), data = model_data)
compare.fits(outcome ~ mfcc6_std, data=model_data, full, reduced)
model.comparison(full, reduced)
visualize(full)
# Model 4: Std Dev of MFCC 6 as a fixed effect and random effect vs only as fixed effect (ie fixed slopes vs variable slopes)
full <- lmer(outcome ~ mfcc6_std + (mfcc6_std|participant), data = model_data)
reduced <- lmer(outcome ~ mfcc6_std + (1|participant), data = model_data)
compare.fits(outcome ~ mfcc6_std, data=model_data, full, reduced)
model.comparison(full, reduced)
visualize(full)
# Import packages
library(tidyverse)
library(flexplot)
library(party)
library(lme4)
# Set wd to active script location
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Read in  CSV files (Change these paths to whatever they need to be)
physio_formatted <- read_csv("physio-formatted.csv")
mir_formatted <- read_csv("mir-formatted.csv")
# Select physio column of interest. (gsr_mean and mean_ibi seem to show the largest effects)
outcome_variable <- "gsr_mean"
# normalize gsr_mean (only necessary if outcome is 'gsr_mean', but doesn't hurt
# regardless)
physio_formatted$gsr_mean = log(physio_formatted$gsr_mean)
# Create 3 column data frame with column of interest
reduced_physio <- physio_formatted |>
select(c("participant", "stim_id", outcome_variable)) |>
rename(outcome = outcome_variable) |>
filter(participant != "18",
stim_id != "baseline")
flexplot(outcome ~ 1, data=reduced_physio)
# Create Model data
model_data <- reduced_physio |>
left_join(mir_formatted, by = "stim_id")
# Model 1: Std dev of Zero Crossing rate as a fixed effect vs data mean
full <- lmer(outcome ~ zero_cross_std + (1|participant), data = model_data)
reduced <- lmer(outcome ~ 1 + (1|participant), data = model_data)
compare.fits(outcome ~ zero_cross_std, data=model_data, full, reduced)
model.comparison(full, reduced)
visualize(full)
# Model 2: Std dev of Zero Crossing rate as fixed and random effect vs only as fixed effect (ie fixed slopes vs variable slopes)
full <- lmer(outcome ~ zero_cross_std + (zero_cross_std|participant), data = model_data)
reduced <- lmer(outcome ~ zero_cross_std + (1|participant), data = model_data)
compare.fits(outcome ~ zero_cross_std, data=model_data, full, reduced)
model.comparison(full, reduced)
visualize(full)
# Model 3: Std Dev of MFCC 6 as a fixed effect vs data mean
full <- lmer(outcome ~ mfcc6_std + (1|participant), data = model_data)
reduced <- lmer(outcome ~ 1 + (1|participant), data = model_data)
compare.fits(outcome ~ mfcc6_std, data=model_data, full, reduced)
model.comparison(full, reduced)
visualize(full)
# Model 4: Std Dev of MFCC 6 as a fixed effect and random effect vs only as fixed effect (ie fixed slopes vs variable slopes)
full <- lmer(outcome ~ mfcc6_std + (mfcc6_std|participant), data = model_data)
reduced <- lmer(outcome ~ mfcc6_std + (1|participant), data = model_data)
compare.fits(outcome ~ mfcc6_std, data=model_data, full, reduced)
model.comparison(full, reduced)
visualize(full)
